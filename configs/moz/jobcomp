#!/bin/bash
####################################################
#               COMPILATION JOB                    #
####################################################

# This script assumes default compilation options, to
# change those options : 
# it can either be  edited to add your own options
# or take into account the following 
# environment variables for compilation choices :
#
# CROCO_NETCDFLIB      : netcdf library
# CROCO_NETCDFINC      : netcdf include 
# CROCO_PRISM_ROOT_DIR : OASIS-MCT directory 
# CROCO_XIOS_ROOT_DIR  : XIOS directory
#
# CROCO_CFT1           : compiler
# CROCO_FFLAGS1        : compilation otpions
#
# Note that environment variables overwrite hard-coded
# options

#
# set source, compilation and run directories
#
SOURCE=../../croco/OCEAN
OSI=../osi
SCRDIR=./Compile
RUNDIR=`pwd`
ROOT_DIR=$SOURCE/..
#
# determine operating system
#
OS=`uname`
HOSTNAME=`uname -n`
UNAME=`uname -a`
echo "OPERATING SYSTEM IS: $OS"

#
# compiler options
#
if [[ $OS == Linux ]] ; then

  if [[ $HOSTNAME == *"datarmor"* ]]; then 
  	LINUX_FC=$FC
  elif [[ $HOSTNAME == *"irene"* ]]; then 
	LINUX_FC=ifort
  elif [[ $UNAME == *"Ubuntu"* ]]; then
 	LINUX_FC=gfortran
 	export OMPI_FC=gfortran
  else
    LINUX_FC=gfortran
    export OMPI_FC=gfortran
  fi
fi
#
# set NETCDF directories
#
#-----------------------------------------------------------
# Use : 
#-lnetcdf           : version netcdf-3.6.3                --
#-lnetcdff -lnetcdf : version netcdf-4.1.2                --
#-lnetcdff          : version netcdf-fortran-4.2-gfortran --
#-----------------------------------------------------------
#
if [[ $HOSTNAME == *"datarmor"* ]]; then 
  NETCDFLIB=$(nf-config --flibs) 
  NETCDFINC=-I$(nf-config --includedir)
elif [[ $HOSTNAME == *"irene"* ]]; then 
  NETCDFLIB=$(nf-config --flibs) 
  NETCDFINC=-I$(nf-config --includedir)
elif [[ $UNAME == *"Ubuntu"* ]]; then
  NETCDFINC="-I/home/dunree/services/hdf5/include -I/home/dunree/services/netcdf/include"
  NETCDFLIB="-L/home/dunree/services/hdf5/lib -L/home/dunree/services/netcdf/lib -lnetcdff -lnetcdf -lhdf5_hl -lhdf5 -lz -lcurl"
else
  NETCDFLIB="-lnetcdf -lnetcdff -llapack -lfftw3 -lfftw3f"
  NETCDFINC=-I$(nf-config --includedir)
fi
#
# set MPI directories if needed
#
MPIF90=$MPIF90
# MPIDIR=$(dirname $(dirname $(which $MPIF90) ))
# MPILIB="-L$MPIDIR/lib -lmpi -limf -lm"
# MPIINC="-I$MPIDIR/include"
MPILIB=""
MPIINC=""

#
# set OASIS-MCT (or OASIS3) directories if needed
#

PRISM_ROOT_DIR=../../../oasis3-mct/compile_oa3-mct

#
# set XIOS directory if needed
#

if [[ $HOSTNAME == *"datarmor"* ]]; then
  # XIOS_ROOT_DIR='/home1/datahome/slgentil/lib/XIOS'
  # XIOS_ROOT_DIR='/home1/datahome/slgentil/lib/XIOS-2.5_mpt'
  XIOS_ROOT_DIR='/home/datawork-croco/datarmor-only/SOURCE_CODES/XIOS/XIOS-2.5'
elif [[ $HOSTNAME == *"irene"* ]]; then 
  #XIOS_ROOT_DIR=$HOME/lib/XIOS2
  XIOS_ROOT_DIR=$HOME/lib/XIOS2.5
elif [[ $UNAME == *"Ubuntu"* ]]; then
# XIOS_ROOT_DIR=/home1/dunree/slgentil/models/XIOS/xios_ubuntu18_LTS
  XIOS_ROOT_DIR=/home1/dunree/slgentil/models/XIOS/XIOS2_ubuntu18_LTS
else
# XIOS_ROOT_DIR=/home/mulroy/slgentil/models/XIOS/xios_ifort
  XIOS_ROOT_DIR=/home/mulroy/slgentil/models/XIOS/xios_gfortran
fi

#
# set other directory if needed
#

if [[ $HOSTNAME == *"datarmor"* ]]; then 
  MYLIB='-mkl=sequential -L/appli/ncl/5.2.1/intel/ncarg/lib -lngmath'
  MYINC="-I$MKLROOT/include/fftw"
elif [[ $HOSTNAME == *"irene"* ]]; then 
  #MYLIB="-L$MKL_LIBDIR -lmkl -L$NCL_NCARG_LIBDIR -lngmath -lgfortran"
  MYLIB="$MKL_LDFLAGS -L$NCL_NCARG_LIBDIR -lngmath -lgfortran"
  #MYLIB="-L$MKL_LIBDIR -lfftw3"
  MYINC="-I$FFTW3_INCDIR"
elif [[ $UNAME == *"Ubuntu"* ]]; then
  MYLIB="-llapack -lfftw3 -lfftw3f -L/usr/lib/x86_64-linux-gnu/ncarg -lngmath -lgfortran"
  MYINC="-I/usr/include"
else
  MYLIB="-llapack -lfftw3 -lfftw3f -L/usr/lib64/ncarg -lngmath -lgfortran"
  MYINC="-I/usr/include"
fi
#
# END OF USER'S MODIFICATIONS
####################################################
#
# Use GNU Make command
#
MAKE=make
#
# clean scratch area
#
rm -rf $SCRDIR
mkdir $SCRDIR
#
# AGRIF sources directory
#
AGRIF_SRC=${ROOT_DIR}/AGRIF
#
# copy SOURCE code
#
/bin/cp -f ${SOURCE}/*.F90 $SCRDIR
/bin/cp -f ${SOURCE}/*.F   $SCRDIR
/bin/cp -f ${SOURCE}/*.h   $SCRDIR
/bin/cp -f ${SOURCE}/Make* $SCRDIR
/bin/cp -f ${SOURCE}/testkeys.F $SCRDIR
#/bin/cp -f ${SOURCE}/jobcomp $SCRDIR
/bin/cp -f ${SOURCE}/amr.in $SCRDIR
/bin/cp -RLf ${AGRIF_SRC} $SCRDIR
/bin/cp -f ${ROOT_DIR}/XIOS/*.F $SCRDIR
/bin/cp -f ${ROOT_DIR}/PISCES/* $SCRDIR
/bin/cp -f ${ROOT_DIR}/PISCES/kRGB61* $RUNDIR
if [[ -e "namelist_pisces" ]] ; then
	echo "  file namelist_pisces exists in Run directory"
else
	/bin/cp -f ${SOURCE}/PISCES/namelist_pisces* $RUNDIR
	echo "  file namelist_pisces copied from source directory"
fi
#
# overwrite with osi files
#
/bin/cp -f ${OSI}/*.F90 $SCRDIR
/bin/cp -f ${OSI}/*.F $SCRDIR
/bin/cp -f ${OSI}/*.h $SCRDIR
#
# overwrite with local files
#
/bin/cp -f *.F $SCRDIR
/bin/cp -f *.h $SCRDIR
/bin/cp -f Make* $SCRDIR
/bin/cp -f jobcomp $SCRDIR
#
# Change directory
#
cd $SCRDIR
#

#
# generates LDFLAGS1 according to users notifications
#

LDFLAGS1="$NETCDFLIB $MYLIB"
CPPFLAGS1="$NETCDFINC $MYINC"

# Set compilation options
#
if [[ $OS == Linux || $OS == Darwin ]] ; then           # ===== LINUX =====
	if [[ $LINUX_FC == ifort || $LINUX_FC == ifc ]] ; then
		CPP1="cpp -traditional -DLinux -DIfort"
		CFT1=ifort
		# FFLAGS1="-O3 -72 -fno-alias -i4 -r8 -fp-model precise $CPPFLAGS1"
 		# FFLAGS1="-xCORE-AVX2 -O3 -i4 -r8 -align all -assume byterecl -extend-source -fno-alias \
 		#          -no-prec-div -no-prec-sqrt -ip -w -traceback $CPPFLAGS1"
		# FFLAGS1="-xCORE-AVX2 -O3 -i4 -r8 -align all -assume byterecl -extend-source -fno-alias \
		#          -no-prec-div -no-prec-sqrt -init=zero -ip -w $CPPFLAGS1"
		#FFLAGS1="-O0 -g3 -check bounds -traceback -ftz -i4 -r8 -extend-source -mcmodel=large $CPPFLAGS1"
		FFLAGS1="-O3 -i4 -r8 -ftz -extend-source -mcmodel=large $CPPFLAGS1"
		LDFLAGS1="$LDFLAGS1"
	elif [[ $LINUX_FC == gfortran ]] ; then
		CPP1="cpp -traditional -DLinux"
		CFT1=gfortran
     	FFLAGS1="-O3 -fdefault-real-8 -fdefault-double-8 -mcmodel=medium -finit-local-zero $CPPFLAGS1"
		# FFLAGS1="-O3 -g -fdefault-real-8 -fdefault-double-8 -fbacktrace \
		# 	-fbounds-check -finit-local-zero $CPPFLAGS1"
		LDFLAGS1="$LDFLAGS1"
	fi
elif [[ $OS == CYGWIN_NT-10.0 ]] ; then  # ======== CYGWIN =======
        CPP1="cpp -traditional -DLinux"
        CFT1="gfortran"
        FFLAGS1="-O4 -fdefault-real-8 -fdefault-double-8 -march=native -mtune=native"
elif [[ $OS == AIX ]] ; then           # ===== IBM =====
	CPP1="cpp"
	CFT1="xlf95 -I$HOME/include/"
	MAKEAGRIF="Makefile.ibm.64"
	FFLAGS1="-q64 -qwarn64 -qfixed -qrealsize=8 -qintsize=8 -qhot \
			-qalias=noaryovrlp -qthreaded -O3 -qarch=pwr4 -qtune=pwr4 -qunroll=yes"
else
	echo "Unknown Operating System"
	exit
fi
#
# determine if AGRIF compilation is required
#
unset COMPILEAGRIF
echo "Checking COMPILEAGRIF..."
if $($CPP1 testkeys.F | grep -i -q agrifisdefined) ; then
	echo " => AGRIF activated"
	COMPILEAGRIF=TRUE
	FFLAGS1="$FFLAGS1 -IAGRIF"
	LDFLAGS1="-LAGRIF -lagrif $LDFLAGS1"
# we use the AGRIF Makedefs.generic definition
	/bin/cp -f Makedefs.generic.AGRIF Makedefs.generic
fi
#
# determine if MPI compilation is required
#
unset COMPILEMPI
echo "Checking COMPILEMPI..."
if $($CPP1 testkeys.F | grep -i -q mpiisdefined) ; then
	echo " => MPI activated"
	COMPILEMPI=TRUE
	LDFLAGS1="$LDFLAGS1 $MPILIB"
	CPPFLAGS1="$CPPFLAGS1 $MPIINC"
	FFLAGS1="$FFLAGS1 $MPIINC"
	CFT1="${MPIF90}"
fi

#
# Take environment variables for compiler and options
#
FFLAGS1=${CROCO_FFLAGS1-$FFLAGS1}
CFT1=${CROCO_CFT1-$CFT1}
#
# determine if NBQ related solvers (BLAS/LAPACK) are required
#
unset COMPILENBQ
echo "Checking COMPILENBQ..."
if $($CPP1 testkeys.F | grep -i -q nbqisdefined) ; then
	echo " => NBQ activated"
	COMPILENBQ=TRUE
	LDFLAGS1="-lblas -llapack $LDFLAGS1"
	FFLAGS1="$FFLAGS1 -ffree-line-length-none"
fi
#
# determine if XIOS compilation is required
#
unset COMPILEXIOS
echo "Checking COMPILEXIOS..."
XIOS_ROOT_DIR=${CROCO_XIOS_ROOT_DIR-$XIOS_ROOT_DIR}
if $($CPP1 testkeys.F | grep -i -q xiosisdefined) ; then
        echo " => XIOS activated"
        COMPILEXIOS=TRUE
#        LDFLAGS1="$LDFLAGS1 $XIOS_ROOT_DIR/lib/libxios.a  -lstdc++ -lnetcdff"
        LDFLAGS1="$XIOS_ROOT_DIR/lib/libxios.a  -lstdc++ $LDFLAGS1"
        CPPFLAGS1="$CPPFLAGS1 -I$XIOS_ROOT_DIR/inc"
        FFLAGS1="$FFLAGS1 -I$XIOS_ROOT_DIR/inc"
#       ln -s $XIOS_ROOT_DIR/bin/xios_server.exe $RUNDIR/.
        rm $RUNDIR/xios_server.exe
        cp  $XIOS_ROOT_DIR/bin/xios_server.exe $RUNDIR
        #$CPP1 -P -traditional -imacros cppdefs.h  ../field_def.xml_full ../field_def.xml
fi
#
# determine if OASIS compilation is required
#
unset COMPILEOASIS
echo "Checking COMPILEOASIS..."
PRISM_ROOT_DIR=${CROCO_PRISM_ROOT_DIR-$PRISM_ROOT_DIR}
if $($CPP1 testkeys.F | grep -i -q oacplisdefined) ; then
    echo " => OASIS activated"
    CHAN=MPI1
    LIBPSMILE="${PRISM_ROOT_DIR}/lib/libpsmile.${CHAN}.a \
		${PRISM_ROOT_DIR}/lib/libmct.a  \
		${PRISM_ROOT_DIR}/lib/libmpeu.a \
		${PRISM_ROOT_DIR}/lib/libscrip.a"
    PSMILE_INCDIR="-I${PRISM_ROOT_DIR}/build/lib/psmile.${CHAN} \
		-I${PRISM_ROOT_DIR}/build/lib/mct"
    COMPILEOASIS=TRUE
    LDFLAGS1="$LDFLAGS1 $LIBPSMILE $NETCDFLIB"
    CPPFLAGS1="$CPPFLAGS1 ${PSMILE_INCDIR} $NETCDFINC"
    FFLAGS1="$FFLAGS1 ${PSMILE_INCDIR} $NETCDFINC"
fi
#
# prepare and compile the library
#
if [[ $COMPILEAGRIF ]] ; then
#
# compile the AGRIF librairy
#
	if [[ $COMPILEMPI ]] ; then
		$MAKE -C AGRIF FC="$CFT1" CPP="$CPP1" CPPFLAGS="-DAGRIF_MPI $MPIINC" FFLAGS="$FFLAGS1"
	else
		$MAKE -C AGRIF FC="$CFT1" CPP="$CPP1" FFLAGS="$FFLAGS1"
	fi
	if [[ $OS == Darwin ]] ; then          # DARWIN
# run RANLIB on Darwin system
		ranlib AGRIF/libagrif.a
	fi
#
	mkdir CROCOFILES
	mkdir -p CROCOFILES/AGRIF_MODELFILES
	mkdir -p CROCOFILES/AGRIF_INC
	$CPP1 amr.in | grep -v -e ! -e '#' -e % -e '*' > CROCOFILES/amr.scrum
	mv AGRIF/conv CROCOFILES/.
	for i in *.h *.h90 ; do
		echo $i
		cat cppdefs.h $i | cpp -P | grep -v -e ! -e '#' -e % -e '*' > CROCOFILES/$i
	done
	mv -f CROCOFILES/private_scratch_AMR.h CROCOFILES/private_scratch.h
fi

#
# determine if OPENMP compilation is needed
#
unset COMPILEOMP
echo "Checking COMPILEOMP..."
if $($CPP1 testkeys.F | grep -i -q openmp) ; then
	COMPILEOMP=TRUE
	if [[ $OS == Linux || $OS == Darwin ]] ; then 
		if [[ $FC == gfortran ]] ; then
			FFLAGS1="$FFLAGS1 -fopenmp"
		elif [[ $FC == ifort || $FC == ifc ]] ; then
			FFLAGS1="$FFLAGS1 -openmp"
		else
			FFLAGS1="$FFLAGS1 -openmp"
		fi
	elif [[ $OS == CYGWIN_NT-10.0 ]] ; then
        FFLAGS1=="$FFLAGS1 -fopenmp"
	elif [[ $OS == AIX ]] ; then
		FFLAGS1="$FFLAGS1 -qsmp=omp"
		CFT1="xlf95_r"
	fi
fi
#
# rewrite Makedefs according to previous flags
# with MPI flags if needed
#
rm -f Makedefs
echo 's?$(FFLAGS1)?'$FFLAGS1'?g' > flags.tmp
echo 's?$(LDFLAGS1)?'$LDFLAGS1'?g' >> flags.tmp
echo 's?$(CPP1)?'$CPP1'?g' >> flags.tmp
echo 's?$(CFT1)?'$CFT1'?g' >> flags.tmp
echo 's?$(CPPFLAGS1)?'$CPPFLAGS1'?g' >> flags.tmp
sed -f flags.tmp Makedefs.generic > Makedefs
rm -f flags.tmp

#
# compile croco
#
#$MAKE depend
#$MAKE
#
# compile from scratch
#
$MAKE clobber
$MAKE mpc
$MAKE 
mv croco $RUNDIR

